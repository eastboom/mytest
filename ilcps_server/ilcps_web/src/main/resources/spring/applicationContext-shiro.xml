<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa 
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
	
	<!-- 1.创建Shiro提供的过滤器工厂, 注入SecurityManager-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		
		<!-- 1.1 注入SecurityManager -->
		<property name="securityManager" ref="securityManager"/>
		
		<!-- 1.2 注入其他参数 -->
		<!-- a. 认证失败，跳转到的错误页面 -->
		<property name="loginUrl" value="/login.jsp"/>
		<!-- b. 认证成功跳转到的地址； 如果代码指定了地址，以代码跳转地址为最终跳转结果。 -->
	    <property name="successUrl" value="/home.jsp"/>
	    <!-- c. 授权校验失败，跳转的错误页面 -->
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
	    
	    <!-- 1.3 过滤器链配置 -->
	    <!-- 
	    	shiro提供了一系列过滤器：
	    	anon   匿名访问过滤器，这里的资源直接放行。
	    	authc  认证（校验）过滤器
	    	perms  授权（校验）过滤器
	    	
	    	/index.jsp* 匹配 /index.jsp?id=10000
	     -->
	    <property name="filterChainDefinitions">
	        <value>
	        	/index.jsp* = anon
				/home* = anon
				/sysadmin/login/login.jsp* = anon
				/sysadmin/login/loginAction_logout* = anon
				/login* = anon
				/logout* = anon
				/components/** = anon
				/css/** = anon
				/img/** = anon
				/js/** = anon
				/plugins/** = anon
				/images/** = anon
				/js/** = anon
				/make/** = anon
				/skin/** = anon
				/stat/** = anon
				/ufiles/** = anon
				/validator/** = anon
				/resource/** = anon
				<!-- 需要进行权限校验的访问url  = perms[url需要的权限] 
				/sysadmin/deptAction_list = perms[部门列表]
				-->
				/** = authc
	        </value>
    	</property>
	</bean>
	
	<!-- 2. 创建SecurityManager，注入realm -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<property name="realm" ref="myRealm"/>
	</bean>
	
	<!-- 3. 创建realm， 注入凭证匹配器 -->
	<bean id="myRealm" class="cn.itcast.realm.CustomRealm">
		<property name="credentialsMatcher" ref="hashedCredentialsMatcher"></property>
	</bean>
	
	
	<!-- 4. 创建凭证匹配器，注入加密算法 -->
	<bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5"></property>
	</bean>
	
	
	<!-- 开启shiro授权校验注解支持 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- depends-on 表示创建当前对象时候需要用到depends-on依赖的对象，所以会先创建depends-on依赖的对象，再创建当前对象。 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>
</beans>








